dominoes = {}
for i in range(7):
    for j in range(i+1):
        dominoes[i,j] = dominoes[j,i] = True

sequence = [(2,3),(3,4),(4,5),(5,6),(6,6),(3,5),(5,6),(6,4),(4,6),(6,6),(5,4),(4,5),(5,3),(3,1),(1,3),(3,4),(4,4),(4,3),(3,1),(1,4)]

def valid_sequence(sequence):
    if len(sequence) == 1:
        return True
    else:
        first, second = sequence[0], sequence[1]
        if dominoes[first[1],second[0]]:
            return valid_sequence(sequence[1:])
        elif dominoes[second[1],first[0]]:
            return valid_sequence([second]+sequence[2:])
        else:
            return False

# проверяем первый случай, где последняя цифра отображает количество точек на правой половине кости домино
result_1 = valid_sequence(sequence)

# проверяем второй случай, где каждая цифра может быть использована как количество точек на правой или левой половине кости домино
sequence = [(2,3),(3,4),(4,5),(5,6),(6,6),(3,5),(5,6),(6,4),(4,6),(6,6),(5,4),(4,5),(5,3),(3,1),(1,3),(3,4),(4,4),(4,3),(3,1),(1,4)]
dominoes = {(i,j):True for i in range(7) for j in range(i+1)}
result_2 = valid_sequence(sequence)

print("Последовательность соответствует правилам игры по первому случаю:", result_1)
print("Последовательность соответствует правилам игры по второму случаю:", result_2)
